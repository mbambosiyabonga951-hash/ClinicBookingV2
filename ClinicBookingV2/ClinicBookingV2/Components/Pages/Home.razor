@page "/Home"

@using ClinicBooking.Client.Models
@using ClinicBooking.Client.Services
@inject IClinicsApi ClinicsApi
@inject IPatientsApi PatientsApi
@inject IAppointmentsApi AppointmentsApi

<PageTitle>Home</PageTitle>

<CreateAppointments CreateAppointmentClicked="CreateAsync" Visible="@Visible" />

@code {
    private bool Visible = true;

    private List<ClinicDto> clinics = new();
    private List<PatientDto> patients = new();
    private List<AppointmentDto> appointments = new();

    private string filterClinicIdStr = "";
    private DateTime? filterDate = DateTime.Today;

    private readonly CreateAppointmentRequest createModel = new();
    private bool isBusy;


    private static string ToDate(DateTime? d) => (d ?? DateTime.Today).ToString("yyyy-MM-dd");
    private static string ToTime(DateTime? dt) => (dt ?? DateTime.Today.AddHours(9)).ToString("HH:mm:ss");

    private async Task CreateAsync(CreateAppointmentRequest createAppointmentRequest)
    {
        isBusy = true;
        try
        {
            var created = await AppointmentsApi.CreateAsync(createAppointmentRequest);

            if (created is not null)
            {

                if (long.TryParse(filterClinicIdStr, out var fId)
                    && fId == created.ClinicId
                    && (filterDate?.ToString("yyyy-MM-dd") ?? "") == created.Date)
                {
                    await LoadAsync();
                }
            }
            createModel.Date = null;
            createModel.StartTime = null;
            createModel.EndTime = null;
        }
        finally
        {
            isBusy = false;
        }
    }


    private async Task LoadAsync()
    {
        if (!long.TryParse(filterClinicIdStr, out var clinicId)) return;
        var date = ToDate(filterDate);
        appointments = (await AppointmentsApi.GetByClinicAndDateAsync(clinicId, date)).ToList();
        StateHasChanged();
    }

 

}